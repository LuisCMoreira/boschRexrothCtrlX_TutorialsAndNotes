[
    {
        "id": "feeca98a84dda1d5",
        "type": "tab",
        "label": "SocketBridge_cameraToElite",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1fb27fc086999318",
        "type": "tcp in",
        "z": "feeca98a84dda1d5",
        "name": "",
        "server": "server",
        "host": "",
        "port": "5025",
        "datamode": "stream",
        "datatype": "utf8",
        "newline": "",
        "topic": "",
        "trim": false,
        "base64": false,
        "tls": "",
        "x": 180,
        "y": 60,
        "wires": [
            [
                "289fbf874c4e8fd4",
                "7f65b93a1101cfe0"
            ]
        ]
    },
    {
        "id": "dfbddf8ddbe33f8a",
        "type": "tcp out",
        "z": "feeca98a84dda1d5",
        "name": "",
        "host": "192.168.1.12",
        "port": "5024",
        "beserver": "client",
        "base64": false,
        "end": false,
        "tls": "",
        "x": 680,
        "y": 220,
        "wires": []
    },
    {
        "id": "d6dd8ea576a090d5",
        "type": "inject",
        "z": "feeca98a84dda1d5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 220,
        "wires": [
            [
                "dfbddf8ddbe33f8a",
                "e373a86ec7ae860b"
            ]
        ]
    },
    {
        "id": "e373a86ec7ae860b",
        "type": "debug",
        "z": "feeca98a84dda1d5",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 300,
        "wires": []
    },
    {
        "id": "289fbf874c4e8fd4",
        "type": "debug",
        "z": "feeca98a84dda1d5",
        "name": "debug 6",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 40,
        "wires": []
    },
    {
        "id": "7f65b93a1101cfe0",
        "type": "function",
        "z": "feeca98a84dda1d5",
        "name": "function 7",
        "func": "// Input string\nlet str = msg.payload;  // Assuming the input is in msg.payload\n\n// Initialize msg.payload as an object\nmsg.payload = {};\n\n// Split the string by spaces to get each key-value pair\nlet keyValuePairs = str.split(\" \");\n\n// Loop through each key-value pair\nkeyValuePairs.forEach(pair => {\n    // Split each pair by \"=\" to separate the key and value\n    let [key, value] = pair.split(\"=\");\n\n    // Assign directly to msg.payload with the key name\n    msg.payload[key] = Number(value);  // Convert value to a number\n});\n\n// Return the message to pass it to the next node\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 100,
        "wires": [
            [
                "197ebdb9bffddf65",
                "789420cdb58761ee"
            ]
        ]
    },
    {
        "id": "197ebdb9bffddf65",
        "type": "debug",
        "z": "feeca98a84dda1d5",
        "name": "debug 7",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 80,
        "wires": []
    },
    {
        "id": "789420cdb58761ee",
        "type": "function",
        "z": "feeca98a84dda1d5",
        "name": "function 8",
        "func": "// Check if msg.payload.R is equal to 1\nif (msg.payload.R === 1) {\n    // Construct the new payload string\n    msg.payload = `${msg.payload.R}, ${msg.payload.X}, ${msg.payload.Y}`;\n\n    // Return the modified message object\n    return msg;\n} else {\n    // Optionally return null to stop the flow or return the original message\n    return null; // or return msg; to pass the unchanged message\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 180,
        "wires": [
            [
                "dfbddf8ddbe33f8a",
                "e373a86ec7ae860b"
            ]
        ]
    }
]